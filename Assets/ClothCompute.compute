// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct particle{
	float3 position;
	float3 velocity;
	float mass;
	int isFixed;
	int iD;
	int springs[16];
};

struct spring {
	float damping;
	float stiffness;
	float restLength;
	int connectionA;
	int connectionB;
	int springType;
};

struct clothVertex {
	float3 vertex;
	int index;
};

RWStructuredBuffer<particle> particles;
RWStructuredBuffer<spring> springs;
StructuredBuffer<float3> initialPositions;

float deltaTime;
float globalStiffness;
float globalDamping;
float mass;
float gravityMul;

float3 fixedPos;
float3 spherePos;

float3 Normalize(float3 v) {
	float len = length(v);
	float3 normal = (len == 0.0) ? float3(0.0, 0.0, 0.0) : v / len;
	return normal;
}
bool IsValidSpring(int x)
{
	if (x != -1)
		return true;
	return false;
}

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	particle p = particles[id.x];
	if (!(p.isFixed == 1)) {
		float3 gravity = float3(0, -9.8, 0) * gravityMul;
		
		//Euler integration
		//---------------------------------------------
		float delta = deltaTime;
		float3 velocity = p.velocity;
		float3 position = p.position;

		float3 dampingForce = float3(0, 0, 0);
		float3 springForce = float3(0, 0, 0);

		for (int i = 0; i < 16; i++)
		{
			if (IsValidSpring(p.springs[i])) {
				spring s = springs[p.springs[i]];
                particle b = particles[s.connectionB];
                particle a = particles[s.connectionA];
                bool reversed = b.iD != p.iD;
                if (reversed)
                {
                    b = a;
                    a = p;
                }

                dampingForce += -globalDamping * (b.velocity - a.velocity);
                springForce += -globalStiffness * (a.position - b.position) * (s.restLength - distance(b.position, a.position));
            }
		}
		//Super Simple Collision
		float3 c = distance(position + velocity * delta, spherePos) < 6.54 ? Normalize(position + velocity * delta - spherePos) * (10 - distance(position + velocity * delta, spherePos)) : float3(0, 0, 0);
        //Plane Collision
        float3 cP = (position + velocity * delta).y < 0.1 ? float3(0, 1, 0) * (1 - (position + velocity * delta).y) : float3(0, 0, 0);


        float3 force = dampingForce + springForce + 1 * gravity;
	
		float3 acceleration = force / 1;
	
        velocity = velocity + acceleration * delta + c + cP;
		position = position + velocity * delta;
		//--------------------------------------------

		
		particles[id.x].position = position;
		particles[id.x].velocity = velocity;

	}
	else {
		particles[id.x].position = initialPositions[id.x] + fixedPos;
		particles[id.x].velocity = p.velocity;
	}
}

